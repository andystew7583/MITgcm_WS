%%%
%%% createDIAGSIZEh.m
%%%
%%% Generates the MITgcm file DIAGNOSTICS_SIZE.h from specified diagnostics
%%% parameters.
%%%

function createDIAGSIZEh (dirname,numdiags,numLevels)

  diagsizehtext = [...
    'C     Diagnostics Array Dimension \n', ...
    'C     --------------------------- \n', ...
    'C     ndiagMax   :: maximum total number of available diagnostics \n', ...
    'C     numlists   :: maximum number of diagnostics list (in data.diagnostics) \n', ...
    'C     numperlist :: maximum number of active diagnostics per list (data.diagnostics) \n', ...
    'C     numLevels  :: maximum number of levels to write    (data.diagnostics) \n', ...
    'C     numDiags   :: maximum size of the storage array for active 2D/3D diagnostics \n', ...
    'C     nRegions   :: maximum number of regions (statistics-diagnostics) \n', ...
    'C     sizRegMsk  :: maximum size of the regional-mask (statistics-diagnostics) \n', ...
    'C     nStats     :: maximum number of statistics (e.g.: aver,min,max ...) \n', ...
    'C     diagSt_size:: maximum size of the storage array for statistics-diagnostics \n', ...
    'C Note : may need to increase "numDiags" when using several 2D/3D diagnostics, \n', ...
    'C  and "diagSt_size" (statistics-diags) since values here are deliberately small. \n', ...
    '      INTEGER    ndiagMax \n', ...
    '      INTEGER    numlists, numperlist, numLevels \n', ...
    '      INTEGER    numDiags \n', ...
    '      INTEGER    nRegions, sizRegMsk, nStats \n', ...
    '      INTEGER    diagSt_size \n', ...
    '      PARAMETER( ndiagMax = 500 ) \n', ...
    '      PARAMETER( numlists = ',num2str(numdiags),', numperlist = 1, numLevels=',num2str(numLevels),' ) \n', ...
    '      PARAMETER( numDiags = ',num2str(numdiags),'*',num2str(numLevels),' ) \n', ...
    '      PARAMETER( nRegions = 0 , sizRegMsk = 1 , nStats = 4 ) \n', ...
    '      PARAMETER( diagSt_size = 9*Nr ) \n', ...
    ' \n', ...
    ' \n', ...
    'CEH3 ;;; Local Variables: *** \n', ...
    'CEH3 ;;; mode:fortran *** \n', ...
    ' \n'];
    
    fid = fopen(fullfile(dirname,'DIAGNOSTICS_SIZE.h'),'w');
    if (fid == -1)
      error('Could not open DIAGNOSTICS_SIZE.h');
    end
    fprintf(fid,diagsizehtext);
    fclose(fid);
    
end
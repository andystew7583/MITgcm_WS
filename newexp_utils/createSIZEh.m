%%%
%%% createSIZEh.m
%%%
%%% Generates the MITgcm required file SIZE.h from specified array
%%% dimension parameters.
%%%

function createSIZEh (dirname,sNx,sNy,nSx,nSy,nPx,nPy,OLx,OLy,Nr)

  sizehtext = [...
    'CBOP \r\n' ...
    'C    !ROUTINE: SIZE.h \r\n' ...
    'C    !INTERFACE: \r\n' ...
    'C    include SIZE.h \r\n' ...
    'C    !DESCRIPTION: \\bv \r\n' ...
    'C     *==========================================================* \r\n' ...
    'C     | SIZE.h Declare size of underlying computational grid.      \r\n' ...
    'C     *==========================================================* \r\n' ...
    'C     | The design here support a three-dimensional model grid     \r\n' ...
    'C     | with indices I,J and K. The three-dimensional domain       \r\n' ...
    'C     | is comprised of nPx*nSx blocks of size sNx along one axis  \r\n' ...
    'C     | nPy*nSy blocks of size sNy along another axis and one      \r\n' ...
    'C     | block of size Nz along the final axis.                     \r\n' ...
    'C     | Blocks have overlap regions of size OLx and OLy along the  \r\n' ...
    'C     | dimensions that are subdivided.                            \r\n' ...
    'C     *==========================================================* \r\n' ...
    'C     \\ev \r\n' ...
    'CEOP \r\n' ...
    'C     Voodoo numbers controlling data layout. \r\n' ...
    'C     sNx :: No. X points in sub-grid. \r\n' ...
    'C     sNy :: No. Y points in sub-grid. \r\n' ...
    'C     OLx :: Overlap extent in X. \r\n' ...
    'C     OLy :: Overlat extent in Y. \r\n' ...
    'C     nSx :: No. sub-grids in X. \r\n' ...
    'C     nSy :: No. sub-grids in Y. \r\n' ...
    'C     nPx :: No. of processes to use in X. \r\n' ...
    'C     nPy :: No. of processes to use in Y. \r\n' ...
    'C     Nx  :: No. points in X for the total domain. \r\n' ...
    'C     Ny  :: No. points in Y for the total domain. \r\n' ...
    'C     Nr  :: No. points in Z for full process domain. \r\n' ...
    '      INTEGER sNx \r\n' ...
    '      INTEGER sNy \r\n' ...
    '      INTEGER OLx \r\n' ...
    '      INTEGER OLy \r\n' ...
    '      INTEGER nSx \r\n' ...
    '      INTEGER nSy \r\n' ...
    '      INTEGER nPx \r\n' ...
    '      INTEGER nPy \r\n' ...
    '      INTEGER Nx \r\n' ...
    '      INTEGER Ny \r\n' ...
    '      INTEGER Nr \r\n' ...
    '      PARAMETER ( \r\n' ...
    '     &           sNx =  ',num2str(sNx),', \r\n' ...
    '     &           sNy =  ',num2str(sNy),', \r\n' ...
    '     &           OLx =  ',num2str(OLx),', \r\n' ...
    '     &           OLy =  ',num2str(OLy),', \r\n' ...
    '     &           nSx =  ',num2str(nSx),', \r\n' ...
    '     &           nSy =  ',num2str(nSy),', \r\n' ...
    '     &           nPx =  ',num2str(nPx),', \r\n' ...
    '     &           nPy =  ',num2str(nPy),', \r\n' ...
    '     &           Nx  = sNx*nSx*nPx, \r\n' ...
    '     &           Ny  = sNy*nSy*nPy, \r\n' ...
    '     &           Nr  =  ',num2str(Nr),') \r\n' ...
    ' \r\n' ...
    'C     MAX_OLX :: Set to the maximum overlap region size of any array \r\n' ...
    'C     MAX_OLY    that will be exchanged. Controls the sizing of exch \r\n' ...
    'C                routine buffers. \r\n' ...
    '      INTEGER MAX_OLX \r\n' ...
    '      INTEGER MAX_OLY \r\n' ...
    '      PARAMETER ( MAX_OLX = OLx, \r\n' ...
    '     &            MAX_OLY = OLy ) \r\n' ...
    ' \r\n'];
    
    fid = fopen(fullfile(dirname,'SIZE.h'),'w');
    if (fid == -1)
      error('Could not open SIZE.h');
    end
    fprintf(fid,sizehtext);
    fclose(fid);
    
end